trigger:
  branches:
    include:
      - '*'
  paths:
    exclude:
      - README.md
      - .gitignore

variables:
  # projectName: pv
  modulePath: '$(GOPATH)/src/github.com/$(Build.Repository.Name)' # "Build.Repository.Name" is the name of the
  # triggering repository (e.g. "michaderbastler/pv").

pool:
  vmImage: 'ubuntu-18.04'

stages:
  - stage: runTests
    displayName: Run tests
    jobs:
      - job: runTests
        displayName: Run tests
        steps:
          - task: GoTool@0
            displayName: 'Install Go and set GOPATH'
            inputs:
              version: '1.15.3'
              goPath: '$(HOME)/go'
          - script: |
              # $(System.DefaultWorkingDirectory) is the local path on the agent where the git repository gets
              # checked out and a new step starts in (e.g. "/home/vsts/work/1/s")
              mkdir -p $(modulePath)    # -p creates also parent directories if necessary
              find ./ -mindepth 1 -maxdepth 1 -exec mv {} $(modulePath) \;    # Find all files, folders and hidden
              # elements only inside the current hierarchy level and move them to $(modulePath)
            displayName: Move repo into GOPATH
          - task: Go@0
            displayName: 'Get required packages'
            inputs:
              command: 'get'
              arguments: '-d -t -v ./...'   # -t download also packages which are required for testing
              workingDirectory: '$(modulePath)'
          - script: |
              cd $(modulePath)
              # Get packages to view the test result in Azure Pipelines
              go get github.com/jstemmer/go-junit-report  # Converts the go test text output to a junit xml report

              # Get packages to view the test coverage in Azure Pipelines
              go get github.com/axw/gocov/gocov     # Coverage reporting tool for Go
              go get github.com/AlekSi/gocov-xml    # Converts the gocov json output into a xml coverage report

              ### TODO ggf latest nehmen, nicht v1
              go get gopkg.in/matm/v1/gocov-html    # Converts the gocov json output into a html coverage report

              # Run tests
              go test -v -coverprofile=coverage.txt -covermode count ./... > test_results.txt

              $GOPATH/bin/go-junit-report < test_results.txt > report.xml
              
              # go test -v -coverprofile=coverage.txt -covermode count ./... 2>&1 | go-junit-report > report.xml
              # go test ./... -v -coverprofile=coverage.txt -covermode count 2>&1 | $GOPATH/bin/go-junit-report > report.xml Fabian
            displayName: 'Run tests'
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'report.xml'
              searchFolder: '$(modulePath)'
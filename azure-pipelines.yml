trigger:
  branches:
    include:
      - '*'
  paths:
    exclude:
      - README.md
      - .gitignore

variables:
  modulePath: '$(GOPATH)/src/github.com/$(Build.Repository.Name)' # "Build.Repository.Name" is the name of the
  # triggering repository (e.g. "michaderbastler/pv").

pool:
  vmImage: 'ubuntu-18.04'

stages:
  - stage: runTests
    displayName: Run tests
    jobs:
      - job: runTests
        displayName: Run tests
        steps:
          - task: GoTool@0
            displayName: 'Install Go and set GOPATH'
            inputs:
              version: '1.15.3'
              goPath: '$(HOME)/go'
          - script: |
              # "System.DefaultWorkingDirectory" is the local path on the agent where the git repository gets
              # checked out and a new step starts in (e.g. "/home/vsts/work/1/s")
              mkdir -p $(modulePath)    # -p creates also parent directories if necessary
              find ./ -mindepth 1 -maxdepth 1 -exec mv {} $(modulePath) \;    # Find all files, folders and hidden
              # elements only inside the current hierarchy level and move them to $(modulePath)
              cd $(modulePath)
              echo Repo is located in: $(pwd)
              echo Files in repo:
              ls -al
            displayName: Move repo inside GOPATH
          - task: Go@0
            displayName: 'Get required packages'
            inputs:
              command: 'get'
              arguments: '-d -t -v ./...'   # -t download also packages which are required for testing
              workingDirectory: '$(modulePath)'
          - script: |
              cd $(modulePath)

              # Get packages to view the test result in Azure Pipelines
              go get github.com/jstemmer/go-junit-report  # Converts the go test result output into a junit xml format

              # Get packages to view the code coverage in Azure Pipelines
              go get github.com/axw/gocov/gocov           # Converts the go test code coverage output into a json format
              go get github.com/AlekSi/gocov-xml          # Converts the gocov json output into a xml format

              ### TODO ggf latest nehmen, nicht v1
              go get gopkg.in/matm/v1/gocov-html          # Converts the gocov json output into a html coverage report

              # Run tests
              go test -v -coverprofile=codeCoverage.txt -covermode count ./... | tee testResults.txt   # tee prints
              # the piped STDOUT of "go test" to the terminal and additionally writes it to a file. STDERR from
              # "go test" is not affected by this and is printed on the terminal as usual, so build errors stop
              # the pipeline.

              $GOPATH/bin/gocov convert codeCoverage.txt > codeCoverage.json
              $GOPATH/bin/gocov-xml < codeCoverage.json > codeCoverage.xml

              $GOPATH/bin/go-junit-report < testResults.txt > testResults.xml

              echo log
              pwd
              ls -al

            displayName: 'Run tests'
            failOnStderr: 'true'
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'testResults.xml'
              searchFolder: '$(modulePath)'
              failTaskOnFailedTests: 'true'
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(modulePath)/codeCoverage.xml'
              #summaryFileLocation: $(MODULEPATH)/**/coverage.xml
              #reportDirectory: '$(modulePath)'
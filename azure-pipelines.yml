trigger:
  branches:
    include:
      - '*'
  paths:
    exclude:
      - README.md
      - .gitignore
      - swagger.yaml
      - do.sh

variables:
  - name: modulePath
    value: '$(GOPATH)/src/github.com/$(Build.Repository.Name)' # "Build.Repository.Name" is the name of the
    # triggering repository (e.g. "michaderbastler/pv").

pool:
  vmImage: 'ubuntu-18.04'

stages:
  - stage: 'runTests'
    displayName: 'Run tests'
    jobs:
      - job: 'runTests'
        displayName: 'Run tests'
        steps:
          - task: GoTool@0
            displayName: 'Install Go and set GOPATH'
            inputs:
              version: '1.15.3'
              goPath: '$(HOME)/go'
          - script: |
              # "System.DefaultWorkingDirectory" is the local path on the agent where the git repository gets
              # checked out and a new step starts in (e.g. "/home/vsts/work/1/s")
              mkdir -p $(modulePath)    # -p creates also parent directories if necessary
              find ./ -mindepth 1 -maxdepth 1 -exec mv {} $(modulePath) \;    # Find all files, folders and hidden
              # elements only inside the current hierarchy level and move them to $(modulePath)
              cd $(modulePath)
              echo Repo is located in: $(pwd)
              echo Files in repo:
              ls -al
            displayName: 'Move repo inside GOPATH'
          - script: |
              # Get packages to view the test result in Azure Pipelines
              go get github.com/jstemmer/go-junit-report # Converts the go test result output into a junit xml format

              # Get packages to view the code coverage in Azure Pipelines
              go get github.com/axw/gocov/gocov          # Converts the go test code coverage output into a json format
              go get github.com/AlekSi/gocov-xml         # Converts the gocov json output into a xml format

              cd $(modulePath)  # go get inside module path prints on STDERR since we are using Go Moduels,
              # that's why we're only now switching into module path

              # Run tests
              go test -v -coverprofile=codeCoverage.txt -covermode count ./... 2>&1 | tee testResults.txt
              # Because "go test" prints infos about downloading modules on STDERR, we have to redircet them to STDOUT.
              # Afterwards "tee" prints the piped STDOUT to the terminal and additionally writes it to a file.

              # Check if "go test" had an error
              exitCode=${PIPESTATUS[0]}     # Get exit code of "go test"
              if [ $exitCode -ne 0 ]; then  # if exitCode is not equal to 0
                echo "\"go test\" had an error (exit code is $exitCode)" >&2  # Let script fail by writing to STDERR
              fi

              # Converts the test results from go test into a junit xml format for Azure DevOps
              $GOPATH/bin/go-junit-report < testResults.txt > testResults.xml

              # Converts the code coverage from go test into a xml format for Azure DevOps
              $GOPATH/bin/gocov convert codeCoverage.txt > codeCoverage.json
              $GOPATH/bin/gocov-xml < codeCoverage.json > codeCoverage.xml
            displayName: 'Run tests'
            failOnStderr: 'true'
          - task: PublishTestResults@2
            condition: always()   # Publish test results also if a test in step "Run tests" failed
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'testResults.xml'
              searchFolder: '$(modulePath)'
              failTaskOnFailedTests: true
          - task: PublishCodeCoverageResults@1
            condition: always()   # Publish code coverage also if a test in step "Run tests" failed
            displayName: 'Publish code coverage'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(modulePath)/codeCoverage.xml'